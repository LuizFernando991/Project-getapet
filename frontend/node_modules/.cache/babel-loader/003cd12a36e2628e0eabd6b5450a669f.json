{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { useGetUserPets } from \"../../hooks/useGetUserPets\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Mypets = () => {\n  _s();\n\n  const isMounted = useRef(false);\n  const [pet, setPets] = useState({});\n  const [getUserPets] = useGetUserPets();\n  useEffect(() => {\n    getUserPets().then(r => {\n      if (isMounted.current) {\n        setPets(r);\n      }\n    });\n    return () => {\n      isMounted.current = false;\n    };\n  }, [getUserPets]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Mypets, \"JdwjAwVKe6gMB8HRtvAGoEKxJOg=\", false, function () {\n  return [useGetUserPets];\n});\n\n_c = Mypets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mypets\");","map":{"version":3,"sources":["E:/Programação/Node.js/Projeto-GetAPet/frontend/src/pages/Mypets/index.jsx"],"names":["useEffect","useState","useRef","useGetUserPets","Mypets","isMounted","pet","setPets","getUserPets","then","r","current"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,cAAT,QAA+B,4BAA/B;;;AAIA,OAAO,MAAMC,MAAM,GAAE,MAAI;AAAA;;AAErB,QAAMC,SAAS,GAAGH,MAAM,CAAC,KAAD,CAAxB;AACA,QAAM,CAAEI,GAAF,EAAOC,OAAP,IAAmBN,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAM,CAAEO,WAAF,IAAkBL,cAAc,EAAtC;AAEAH,EAAAA,SAAS,CAAC,MAAI;AACVQ,IAAAA,WAAW,GAAGC,IAAd,CAAmBC,CAAC,IAAI;AACpB,UAAGL,SAAS,CAACM,OAAb,EAAqB;AACjBJ,QAAAA,OAAO,CAACG,CAAD,CAAP;AACH;AACJ,KAJD;AAMA,WAAO,MAAK;AAACL,MAAAA,SAAS,CAACM,OAAV,GAAoB,KAApB;AAA0B,KAAvC;AACH,GARQ,EAQN,CAACH,WAAD,CARM,CAAT;AAWA,sBACI,qCADJ;AAOH,CAzBM;;GAAMJ,M;UAKeD,c;;;KALfC,M","sourcesContent":["import { useEffect, useState, useRef } from \"react\"\r\nimport { useGetUserPets } from \"../../hooks/useGetUserPets\"\r\n\r\n\r\n\r\nexport const Mypets =()=>{\r\n\r\n    const isMounted = useRef(false)\r\n    const [ pet, setPets ] = useState({})\r\n\r\n    const [ getUserPets ] = useGetUserPets()\r\n\r\n    useEffect(()=>{\r\n        getUserPets().then(r => {\r\n            if(isMounted.current){\r\n                setPets(r)\r\n            }\r\n        })\r\n       \r\n        return ()=> {isMounted.current = false}\r\n    }, [getUserPets])\r\n\r\n\r\n    return(\r\n        <>\r\n                \r\n            \r\n\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}