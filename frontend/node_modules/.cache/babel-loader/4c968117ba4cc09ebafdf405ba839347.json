{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useNavigate } from 'react-router-dom';\nimport { useCallback } from 'react';\nimport api from \"../helpers/api\";\nimport { useFlashMessage } from '../hooks/useFlashMessage';\nexport const usePet = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const [setFlashMessage] = useFlashMessage();\n  const getPetById = useCallback(async id => {\n    const pet = await api.get(`/pets/${id}`, {\n      headers: {\n        Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return pet.data.pet;\n  }, []);\n  const getNewPets = useCallback(async id => {\n    const pet = await api.get(`/pets/${id}`, {\n      headers: {\n        Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return pet.data.pet;\n  }, []);\n\n  const createPet = async pet => {\n    let msgType = 'success';\n    let formData = new FormData();\n    await Object.keys(pet).forEach(key => {\n      if (key === 'images') {\n        for (let i = 0; i < pet[key].length; i++) {\n          formData.append('images', pet[key][i]);\n        }\n      } else {\n        formData.append(key, pet[key]);\n      }\n    });\n    const data = await api.post(`/pets/create`, formData, {\n      headers: {\n        Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(err => {\n      msgType = 'error';\n      return err.response.data;\n    });\n    setFlashMessage(data.message, msgType);\n\n    if (msgType === 'success') {\n      navigate('/mypets');\n    }\n  };\n\n  const removePet = async id => {\n    let msgType = 'success';\n    const data = await api.delete(`/pets/${id}`, {\n      headers: {\n        Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(err => {\n      msgType = 'error';\n      return err.response.data;\n    });\n    setFlashMessage(data.message, msgType);\n  };\n\n  const editPet = async pet => {\n    let msgType = 'success';\n    let formData = new FormData();\n    Object.keys(pet).forEach(key => {\n      if (key === 'images') {\n        for (let i = 0; i < pet[key].length; i++) {\n          formData.append('images', pet[key][i]);\n        }\n      } else {\n        formData.append(key, pet[key]);\n      }\n    });\n    const data = await api.patch(`/pets/${pet._id}`, formData, {\n      headers: {\n        Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(err => {\n      msgType = 'error';\n      return err.response.data;\n    });\n    setFlashMessage(data.message, msgType);\n\n    if (msgType === 'success') {\n      navigate('/mypets');\n    }\n  };\n\n  return {\n    createPet,\n    removePet,\n    getPetById,\n    editPet,\n    getNewPets\n  };\n};\n\n_s(usePet, \"tHCrTLtFknOeyRQXF9kGWbF4/0I=\", false, function () {\n  return [useNavigate, useFlashMessage];\n});","map":{"version":3,"sources":["E:/Programação/Node.js/Projeto-GetAPet/frontend/src/hooks/usePet.js"],"names":["useNavigate","useCallback","api","useFlashMessage","usePet","navigate","setFlashMessage","getPetById","id","pet","get","headers","Authorization","JSON","parse","localStorage","getItem","data","getNewPets","createPet","msgType","formData","FormData","Object","keys","forEach","key","i","length","append","post","then","response","catch","err","message","removePet","delete","editPet","patch","_id"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAI;AAAA;;AAEtB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAM,CAAEM,eAAF,IAAsBH,eAAe,EAA3C;AAEA,QAAMI,UAAU,GAAGN,WAAW,CAAC,MAAMO,EAAN,IAAW;AAEtC,UAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,GAAJ,CAAS,SAAQF,EAAG,EAApB,EAAuB;AACrCG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAA0C,EAD9D;AAEL,wBAAgB;AAFX;AAD4B,KAAvB,CAAlB;AAQA,WAAQP,GAAG,CAACQ,IAAJ,CAASR,GAAjB;AACH,GAX6B,EAW3B,EAX2B,CAA9B;AAaA,QAAMS,UAAU,GAAGjB,WAAW,CAAC,MAAMO,EAAN,IAAW;AAEtC,UAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,GAAJ,CAAS,SAAQF,EAAG,EAApB,EAAuB;AACrCG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAA0C,EAD9D;AAEL,wBAAgB;AAFX;AAD4B,KAAvB,CAAlB;AAQA,WAAQP,GAAG,CAACQ,IAAJ,CAASR,GAAjB;AACH,GAX6B,EAW3B,EAX2B,CAA9B;;AAaA,QAAMU,SAAS,GAAG,MAAOV,GAAP,IAAa;AAC3B,QAAIW,OAAO,GAAG,SAAd;AAEA,QAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AAEA,UAAMC,MAAM,CAACC,IAAP,CAAYf,GAAZ,EAAiBgB,OAAjB,CAA0BC,GAAD,IAAQ;AACnC,UAAGA,GAAG,KAAK,QAAX,EAAoB;AAChB,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGlB,GAAG,CAACiB,GAAD,CAAH,CAASE,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpCN,UAAAA,QAAQ,CAACQ,MAAT,CAAgB,QAAhB,EAA0BpB,GAAG,CAACiB,GAAD,CAAH,CAASC,CAAT,CAA1B;AACH;AAEJ,OALD,MAKK;AACDN,QAAAA,QAAQ,CAACQ,MAAT,CAAgBH,GAAhB,EAAqBjB,GAAG,CAACiB,GAAD,CAAxB;AACH;AACJ,KATK,CAAN;AAWA,UAAMT,IAAI,GAAG,MAAMf,GAAG,CACrB4B,IADkB,CACZ,cADY,EACGT,QADH,EACa;AAC5BV,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAA0C,EAD9D;AAEL,wBAAgB;AAFX;AADmB,KADb,EAOlBe,IAPkB,CAOZC,QAAD,IAAc;AAEhB,aAAOA,QAAQ,CAACf,IAAhB;AACH,KAVkB,EAWlBgB,KAXkB,CAWXC,GAAD,IAAS;AAEZd,MAAAA,OAAO,GAAG,OAAV;AACA,aAAOc,GAAG,CAACF,QAAJ,CAAaf,IAApB;AACH,KAfkB,CAAnB;AAiBAX,IAAAA,eAAe,CAACW,IAAI,CAACkB,OAAN,EAAef,OAAf,CAAf;;AACA,QAAGA,OAAO,KAAK,SAAf,EAAyB;AACrBf,MAAAA,QAAQ,CAAC,SAAD,CAAR;AACH;AAEJ,GAtCD;;AAwCA,QAAM+B,SAAS,GAAG,MAAM5B,EAAN,IAAW;AAEzB,QAAIY,OAAO,GAAG,SAAd;AAEA,UAAMH,IAAI,GAAG,MAAMf,GAAG,CAACmC,MAAJ,CAAY,SAAQ7B,EAAG,EAAvB,EAA0B;AACzCG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAA0C;AAD9D;AADgC,KAA1B,EAIhBe,IAJgB,CAIVC,QAAD,IAAY;AAChB,aAAOA,QAAQ,CAACf,IAAhB;AACH,KANkB,EAMhBgB,KANgB,CAMTC,GAAD,IAAO;AACZd,MAAAA,OAAO,GAAG,OAAV;AACA,aAAOc,GAAG,CAACF,QAAJ,CAAaf,IAApB;AACH,KATkB,CAAnB;AAWAX,IAAAA,eAAe,CAACW,IAAI,CAACkB,OAAN,EAAef,OAAf,CAAf;AACH,GAhBD;;AAkBA,QAAMkB,OAAO,GAAG,MAAM7B,GAAN,IAAY;AAExB,QAAIW,OAAO,GAAG,SAAd;AACA,QAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AAGAC,IAAAA,MAAM,CAACC,IAAP,CAAYf,GAAZ,EAAiBgB,OAAjB,CAA0BC,GAAD,IAAO;AAC5B,UAAGA,GAAG,KAAK,QAAX,EAAoB;AAChB,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGlB,GAAG,CAACiB,GAAD,CAAH,CAASE,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpCN,UAAAA,QAAQ,CAACQ,MAAT,CAAgB,QAAhB,EAA0BpB,GAAG,CAACiB,GAAD,CAAH,CAASC,CAAT,CAA1B;AACH;AACJ,OAJD,MAIK;AACDN,QAAAA,QAAQ,CAACQ,MAAT,CAAgBH,GAAhB,EAAqBjB,GAAG,CAACiB,GAAD,CAAxB;AACH;AACJ,KARD;AAUA,UAAMT,IAAI,GAAG,MAAMf,GAAG,CACrBqC,KADkB,CACX,SAAQ9B,GAAG,CAAC+B,GAAI,EADL,EACQnB,QADR,EACkB;AACjCV,MAAAA,OAAO,EAAG;AACNC,QAAAA,aAAa,EAAG,UAASC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAA0C,EAD7D;AAEN,wBAAgB;AAFV;AADuB,KADlB,EAMhBe,IANgB,CAMVC,QAAD,IAAY;AAChB,aAAOA,QAAQ,CAACf,IAAhB;AACH,KARkB,EAQhBgB,KARgB,CAQTC,GAAD,IAAO;AACZd,MAAAA,OAAO,GAAG,OAAV;AACA,aAAOc,GAAG,CAACF,QAAJ,CAAaf,IAApB;AACH,KAXkB,CAAnB;AAaAX,IAAAA,eAAe,CAACW,IAAI,CAACkB,OAAN,EAAef,OAAf,CAAf;;AACA,QAAGA,OAAO,KAAK,SAAf,EAAyB;AACrBf,MAAAA,QAAQ,CAAC,SAAD,CAAR;AACH;AAEJ,GAlCD;;AAoCA,SAAO;AAAEc,IAAAA,SAAF;AAAaiB,IAAAA,SAAb;AAAwB7B,IAAAA,UAAxB;AAAoC+B,IAAAA,OAApC;AAA6CpB,IAAAA;AAA7C,GAAP;AACH,CA/HM;;GAAMd,M;UAEQJ,W,EAEWG,e","sourcesContent":["import { useNavigate } from 'react-router-dom'\r\nimport { useCallback } from 'react'\r\nimport api from \"../helpers/api\"\r\nimport { useFlashMessage } from '../hooks/useFlashMessage'\r\n\r\nexport const usePet = ()=>{\r\n    \r\n    const navigate = useNavigate()\r\n\r\n    const [ setFlashMessage ] = useFlashMessage()\r\n\r\n    const getPetById = useCallback(async(id)=>{\r\n        \r\n        const pet = await api.get(`/pets/${id}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`,\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n\r\n\r\n        return (pet.data.pet)\r\n    }, [])\r\n\r\n    const getNewPets = useCallback(async(id)=>{\r\n        \r\n        const pet = await api.get(`/pets/${id}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`,\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n\r\n\r\n        return (pet.data.pet)\r\n    }, [])\r\n\r\n    const createPet = async (pet)=>{\r\n        let msgType = 'success'\r\n\r\n        let formData = new FormData()\r\n\r\n        await Object.keys(pet).forEach((key) =>{\r\n            if(key === 'images'){\r\n                for(let i = 0; i < pet[key].length; i++){\r\n                    formData.append('images', pet[key][i])\r\n                }\r\n\r\n            }else{\r\n                formData.append(key, pet[key])\r\n            }\r\n        })\r\n\r\n        const data = await api\r\n        .post(`/pets/create`, formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`,\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n        .then((response) => {\r\n            \r\n            return response.data\r\n        })\r\n        .catch((err) => {\r\n            \r\n            msgType = 'error'\r\n            return err.response.data\r\n        })\r\n        \r\n        setFlashMessage(data.message, msgType)\r\n        if(msgType === 'success'){\r\n            navigate('/mypets')\r\n        }\r\n\r\n    }\r\n\r\n    const removePet = async(id)=>{\r\n\r\n        let msgType = 'success'\r\n\r\n        const data = await api.delete(`/pets/${id}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`\r\n            }\r\n        }).then((response)=>{\r\n            return response.data\r\n        }).catch((err)=>{\r\n            msgType = 'error'\r\n            return err.response.data\r\n        })\r\n\r\n        setFlashMessage(data.message, msgType)\r\n    }\r\n\r\n    const editPet = async(pet)=>{\r\n\r\n        let msgType = 'success'\r\n        let formData = new FormData()\r\n\r\n\r\n        Object.keys(pet).forEach((key)=>{\r\n            if(key === 'images'){\r\n                for(let i = 0; i < pet[key].length; i++){\r\n                    formData.append('images', pet[key][i])\r\n                }\r\n            }else{\r\n                formData.append(key, pet[key])\r\n            }\r\n        })\r\n\r\n        const data = await api\r\n        .patch(`/pets/${pet._id}`, formData, {\r\n            headers : {\r\n                Authorization: `Bearer ${JSON.parse(localStorage.getItem('token'))}`,\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then((response)=>{\r\n            return response.data\r\n        }).catch((err)=>{\r\n            msgType = 'error'\r\n            return err.response.data\r\n        })\r\n        \r\n        setFlashMessage(data.message, msgType)\r\n        if(msgType === 'success'){\r\n            navigate('/mypets')\r\n        }\r\n\r\n    }\r\n\r\n    return { createPet, removePet, getPetById, editPet, getNewPets }\r\n}"]},"metadata":{},"sourceType":"module"}